// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    boards        Board[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Board {
    id     String  @id @default(cuid())
    name   String
    tasks  Task[]
    User   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Task {
    id          String     @id @default(cuid())
    name        String
    description String
    status      TaskStatus
    Board       Board?     @relation(fields: [boardId], references: [id])
    boardId     String?
    // comments    TaskComment[]
}

enum TaskStatus {
    BACKLOG
    TODO
    IN_PROGRESS
    ICE_BOXED
    TESTING
    DONE
}

// model TaskComment {
//     id          String   @id @default(cuid())
//     Task        Task?    @relation(fields: [taskId], references: [id])
//     taskId      String?
//     text        String
//     createdDate DateTime
// }
